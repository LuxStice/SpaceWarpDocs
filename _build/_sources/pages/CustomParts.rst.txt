Создание пользовательских деталей
==================================
Отказ от ответственности: это руководство предназначено для аспекта моддинга, который не полностью понят. Большая часть того, что мы знаем, получено путем копирования
и вставка информации из самой базовой части, так что выход за рамки этого должен зависеть от ваших собственных экспериментов.

Начальная настройка
--------------------
Для начала нам нужно настроить нашу среду разработки Unity, которую мы будем использовать для создания наших пользовательских частей.

Единство
~~~~~~~~

1. Установите `Unity 2020.3.33f1 <https://unity.com/releases/editor/whats-new/2020.3.33#release-notes>`_. Это
   версию единства, которую использует Kerbal Space Program 2, так что это та версия, которая нам нужна.
2. Создайте новый проект. Если вы используете концентратор Unity, убедитесь, что версия вашего редактора установлена правильно.

Тандеркит
~~~~~~~~~

3. Загрузите zip-файл с исходным кодом из последней версии `ThunderKit <https://github.com/PassivePicasso/ThunderKit/releases/latest>`_
   на Гитхабе. Это инструмент, который загрузит необходимые компоненты в проект Unity, а также сделает несколько других действий.
   вещи, выходящие за рамки этого руководства.
4. Извлеките папку из скачанного zip-архива куда-нибудь, где вы ее помните. Затем в Unity откройте менеджер пакетов
   перейдя в Окно -> Диспетчер пакетов.
5. В диспетчере пакетов щелкните значок плюса в левом верхнем углу, затем добавьте пакеты с диска.
6. Перейдите к загруженной папке, затем откройте :code:`package.json`.
   
7. Если все работает правильно, должно открыться окно настроек ThunderKit. В этом окне выберите ThunderKit
   Настройка, затем в разделе «Найти и загрузить файлы игры для проекта» выберите «Обзор».
8. Перейдите в папку установки Kerbal Space Program 2 (щелкните правой кнопкой мыши KSP 2 в Steam, выберите «Управление», просмотрите локальные файлы, чтобы
   найдите его, если не знаете, где он находится) и выберите :code:`KSP2_x64.exe`.
9.  Выберите Импорт, чтобы загрузить игру в свой проект. Если он показывает «Требуется обновление API», нажмите «Я сделал резервную копию». Вперед, продолжать!'
10. При появлении запроса перезапустите проект.

Адресуемые
~~~~~~~~~~~~~

12. Снова откройте диспетчер пакетов, измените параметр вверху с Packages: In Project на Unity Registry.
    
13. Выберите Addressables, затем Install. На этом этапе вы можете получить некоторые ошибки в вашей консоли, они могут (вероятно) быть благополучно игнорируется. KSP 2 также имеет этот пакет, и ThunderKit импортировал его, но не таким образом, чтобы редактор чтобы получить к нему доступ. Скорее всего, они не будут конфликтовать.

Наконец, вам понадобится какой-нибудь метод копирования ресурсов Unity. Метод которого не важен для этого урока.

Создание детали
------------------
Первое, что нам нужно сделать, это создать `JSON <https://www.w3schools.com/whatis/whatis_json.asp>`_ файл, который описывает
часть. Открыв пакет ресурсов, который начинается с :code:`parts_json-base_all`, вы получите представление об основном формате.
Следует провести дополнительные исследования, чтобы выяснить степень этих настроек, а пока найдите часть, наиболее близкую к тому, что вы хотите
add и просто скопируйте и вставьте его в свой проект Unity в качестве текстового актива. Единственное, что вам нужно изменить, это :code:`partName`
запись в верхней части раздела :code:`data`. Это уникальный идентификатор вашей детали, если у двух частей одинаковый идентификатор, это плохо,
не делайте этого, поэтому убедитесь, что вы изменили это поле и следите за ним.

Затем создайте префаб вашей детали. См. :code:`parts-base_assets` для части, которую вы продублировали для примеров. Как сделать
базовая сборка детали выходит за рамки данного руководства. Префабу, однако, нужно несколько поведений. В корне
префаба, выберите «Добавить компонент», и вам понадобятся данные основных частей, Module_Color и Module_Drag. Более сложный
частей, вероятно, потребуется больше, см. существующие активы для справки. Заполните их данными из вашей части шаблона.
Много, если эти данные уже были в вашем JSON, необходимо тестирование, чтобы подтвердить, что имеет приоритет.

Наконец, вам нужно будет создать спрайт для вашей части. Спрайты по умолчанию имеют размер 512x512.

Сделать его адресным
---------------------
Теперь нам нужно на самом деле экспортировать это так, чтобы игра могла загрузить его правильно. В инспекторе для каждого
ваших активов, будет установлен флажок «Адресный», установите для него значение true, это скажет Unity включать, когда мы
построить нашу адресуемую. Текстовое поле — это имя, по которому можно ссылаться на актив во время выполнения, два важных значения.
являются: спрайт должен быть `<partName>.png`, а префаб должен быть `<partName>.prefab`, исключая любую структуру папок
которые были добавлены автоматически (включая «Активы»).

Как только это будет завершено, откройте группы Addressables с помощью Window -> Asset Management -> Addressables -> Groups. Вот
где вы настраиваете группы экспорта для вашего мода. Все должно быть в локальной группе по умолчанию. Чтобы довести игру до
загрузите файл json, он должен быть помечен как `parts_data`. В раскрывающемся списке ярлыков управление ярлыками позволит вам создавать
наклейка.

Далее выберите группу, которая должна показать настройки для нее в инспекторе. Установите путь сборки на :code:`<custom>`,
остроумие